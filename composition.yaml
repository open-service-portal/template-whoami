# Composition: WhoareApp Implementation
# Purpose: Implements the WhoareApp using provider-kubernetes with environment detection
# Restaurant Analogy: The "recipe" - how to prepare what was ordered
apiVersion: apiextensions.crossplane.io/v2
kind: Composition
metadata:
  name: xwhoareapp-kubernetes
spec:
  compositeTypeRef:
    apiVersion: demo.openportal.dev/v1alpha1
    kind: WhoareApp
  
  # Load the global DNS config
  environment:
    environmentConfigs:
    - type: Reference
      ref:
        name: dns-config  # Global DNS config with zone
  
  mode: Pipeline
  pipeline:
  
  # Step 1: Generate resources using go-templating with environment data
  - step: deploy-app
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{- $environment := .observed.composite.resource.spec.environment | default "local" }}
          {{- $replicas := .observed.composite.resource.spec.replicas | default 1 }}
          {{- $image := .observed.composite.resource.spec.image | default "traefik/whoami:v1.10.1" }}
          {{- $xrName := .observed.composite.resource.metadata.name }}
          {{- $appName := .observed.composite.resource.spec.name | default "whoami" }}
          
          {{/* Determine domain based on environment and zone config */}}
          {{- $zone := "localhost" }}
          {{- if .context.environment }}
            {{- if .context.environment.zone }}
              {{- $zone = .context.environment.zone }}
            {{- end }}
          {{- end }}
          
          {{/* Build the full domain */}}
          {{- $domain := "" }}
          {{- if eq $environment "local" }}
            {{- $domain = printf "%s.localhost" $appName }}
          {{- else if eq $environment "production" }}
            {{- $domain = printf "%s.%s" $appName $zone }}
          {{- else if eq $environment "staging" }}
            {{- $domain = printf "%s-staging.%s" $appName $zone }}
          {{- else }}
            {{- $domain = printf "%s.localhost" $appName }}
          {{- end }}
          
          ---
          # Namespace
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-namespace
            annotations:
              crossplane.io/external-name: {{ $xrName }}-namespace
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: {{ $xrName }}
                  labels:
                    app: whoami-xr
                    instance: {{ $xrName }}
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Deployment
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-deployment
            annotations:
              crossplane.io/external-name: {{ $xrName }}-deployment
          spec:
            forProvider:
              manifest:
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: whoami
                  namespace: {{ $xrName }}
                  labels:
                    app: whoami-xr
                    instance: {{ $xrName }}
                spec:
                  replicas: {{ $replicas }}
                  selector:
                    matchLabels:
                      app: whoami-xr
                      instance: {{ $xrName }}
                  template:
                    metadata:
                      labels:
                        app: whoami-xr
                        instance: {{ $xrName }}
                    spec:
                      containers:
                      - name: whoami
                        image: {{ $image }}
                        ports:
                        - containerPort: 80
                          name: web
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "10m"
                          limits:
                            memory: "64Mi"
                            cpu: "100m"
                        livenessProbe:
                          httpGet:
                            path: /health
                            port: 80
                          initialDelaySeconds: 10
                        readinessProbe:
                          httpGet:
                            path: /health
                            port: 80
                          initialDelaySeconds: 5
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Service
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-service
            annotations:
              crossplane.io/external-name: {{ $xrName }}-service
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: Service
                metadata:
                  name: whoami
                  namespace: {{ $xrName }}
                  labels:
                    app: whoami-xr
                    instance: {{ $xrName }}
                spec:
                  type: ClusterIP
                  selector:
                    app: whoami-xr
                    instance: {{ $xrName }}
                  ports:
                  - port: 80
                    targetPort: 80
                    protocol: TCP
                    name: http
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Ingress with dynamic domain
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-ingress
            annotations:
              crossplane.io/external-name: {{ $xrName }}-ingress
          spec:
            forProvider:
              manifest:
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: whoami
                  namespace: {{ $xrName }}
                  labels:
                    app: whoami-xr
                    instance: {{ $xrName }}
                  annotations:
                    nginx.ingress.kubernetes.io/rewrite-target: /
                spec:
                  ingressClassName: nginx
                  rules:
                  - host: {{ $domain }}
                    http:
                      paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: whoami
                            port:
                              number: 80
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Status update
          apiVersion: meta.crossplane.io/v1alpha1
          kind: CompositeResourceDefinition
          status:
            domain: {{ $domain }}
  
  # Step 2: Mark as ready when all resources are created
  - step: auto-ready
    functionRef:
      name: function-auto-ready