# Composition: WhoAmIApp GitOps Implementation
# Purpose: Creates a GitHub repository with deployment manifests for Flux
# Restaurant Analogy: Creates a "recipe book" (repo) for Flux to follow
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: whoamiapp-gitops
  labels:
    mode: gitops
    description: gitops-deployment
spec:
  compositeTypeRef:
    apiVersion: demo.openportal.dev/v1alpha1
    kind: WhoAmIApp
  
  mode: Pipeline
  pipeline:
  
  # Step 1: Load environment configuration
  - step: load-environment
    functionRef:
      name: function-environment-configs
    input:
      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        environmentConfigs:
        - type: Reference
          ref:
            name: dns-config  # Global DNS config with zone
  
  # Step 2: Generate GitOps resources using go-templating
  - step: create-gitops-repo
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{- $replicas := .observed.composite.resource.spec.replicas | default 1 }}
          {{- $image := .observed.composite.resource.spec.image | default "traefik/whoami:v1.10.1" }}
          {{- $xrName := .observed.composite.resource.metadata.name }}
          {{- $appName := .observed.composite.resource.spec.name | default "whoami" }}
          {{- $namespace := .observed.composite.resource.metadata.namespace }}
          
          {{/* Determine domain from dns-config or default to localhost */}}
          {{- $domain := printf "%s.localhost" $appName }}
          {{- $zone := index .context "apiextensions.crossplane.io/environment" "zone" }}
          {{- if $zone }}
            {{- $domain = printf "%s.%s" $appName $zone }}
          {{- end }}
          
          {{/* Generate the deployment manifest content */}}
          {{- $deploymentYaml := printf `---
          # Generated by WhoareApp GitOps composition
          apiVersion: v1
          kind: Namespace
          metadata:
            name: %s
            labels:
              app: whoami-gitops
              instance: %s
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: whoami
            namespace: %s
            labels:
              app: whoami-gitops
              instance: %s
          spec:
            replicas: %d
            selector:
              matchLabels:
                app: whoami-gitops
                instance: %s
            template:
              metadata:
                labels:
                  app: whoami-gitops
                  instance: %s
              spec:
                containers:
                - name: whoami
                  image: %s
                  ports:
                  - containerPort: 80
                    name: web
                  resources:
                    requests:
                      memory: "32Mi"
                      cpu: "10m"
                    limits:
                      memory: "64Mi"
                      cpu: "100m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 80
                    initialDelaySeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 80
                    initialDelaySeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: whoami
            namespace: %s
            labels:
              app: whoami-gitops
              instance: %s
          spec:
            type: ClusterIP
            selector:
              app: whoami-gitops
              instance: %s
            ports:
            - port: 80
              targetPort: 80
              protocol: TCP
              name: http
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: whoami
            namespace: %s
            labels:
              app: whoami-gitops
              instance: %s
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            ingressClassName: nginx
            rules:
            - host: %s
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: whoami
                      port:
                        number: 80` $xrName $xrName $xrName $xrName $replicas $xrName $xrName $image $xrName $xrName $xrName $xrName $xrName $domain }}
          
          {{/* Generate kustomization.yaml content */}}
          {{- $kustomizationYaml := printf `apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          
          resources:
          - deployment.yaml` }}
          
          {{/* Generate README content */}}
          {{- $readmeContent := printf `# %s Deployment
          
          Generated WhoAmIApp deployment for Flux GitOps.
          
          ## Application Details
          - **Name**: %s
          - **Domain**: %s
          - **Replicas**: %d
          - **Image**: %s
          
          ## Deployment
          
          This repository is automatically deployed by Flux.
          
          ## Manual Apply
          
          If needed, you can manually apply:
          ` + "```bash" + `
          kubectl apply -f deployment.yaml
          ` + "```" $appName $appName $domain $replicas $image }}
          
          ---
          # ConfigMap to store the deployment manifest
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-gitops-content
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $xrName }}-gitops-content
              crossplane.io/external-name: {{ $xrName }}-gitops-content
          spec:
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: {{ $xrName }}-gitops-content
                  namespace: {{ $namespace }}
                  labels:
                    app: whoami-gitops
                    instance: {{ $xrName }}
                data:
                  deployment.yaml: {{ $deploymentYaml | quote }}
                  kustomization.yaml: {{ $kustomizationYaml | quote }}
                  README.md: {{ $readmeContent | quote }}
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Create GitHub repository (using a Job as we don't have provider-github)
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-create-repo
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $xrName }}-create-repo
              crossplane.io/external-name: {{ $xrName }}-create-repo-job
          spec:
            forProvider:
              manifest:
                apiVersion: batch/v1
                kind: Job
                metadata:
                  name: {{ $xrName }}-create-repo
                  namespace: {{ $namespace }}
                spec:
                  template:
                    spec:
                      restartPolicy: Never
                      containers:
                      - name: create-repo
                        image: ghcr.io/fluxcd/flux-cli:v2.2.0
                        command:
                        - sh
                        - -c
                        - |
                          echo "Note: This would create a GitHub repository named deploy-{{ $appName }}"
                          echo "Repository: https://github.com/open-service-portal/deploy-{{ $appName }}"
                          echo ""
                          echo "To manually create this repository and push the content:"
                          echo "1. Create repository: gh repo create open-service-portal/deploy-{{ $appName }} --public"
                          echo "2. Clone it: git clone https://github.com/open-service-portal/deploy-{{ $appName }}.git"
                          echo "3. Copy the generated manifests from the ConfigMap"
                          echo "4. Push to main branch"
                          echo ""
                          echo "Then configure Flux to watch this repository."
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Flux GitRepository source
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-flux-source
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $xrName }}-flux-source
              crossplane.io/external-name: {{ $xrName }}-flux-source
          spec:
            forProvider:
              manifest:
                apiVersion: source.toolkit.fluxcd.io/v1
                kind: GitRepository
                metadata:
                  name: deploy-{{ $appName }}
                  namespace: flux-system
                spec:
                  interval: 1m0s
                  url: https://github.com/open-service-portal/deploy-{{ $appName }}
                  ref:
                    branch: main
            providerConfigRef:
              name: kubernetes-provider
          
          ---
          # Flux Kustomization to deploy from the repo
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $xrName }}-flux-kustomization
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $xrName }}-flux-kustomization
              crossplane.io/external-name: {{ $xrName }}-flux-kustomization
          spec:
            forProvider:
              manifest:
                apiVersion: kustomize.toolkit.fluxcd.io/v1
                kind: Kustomization
                metadata:
                  name: deploy-{{ $appName }}
                  namespace: flux-system
                spec:
                  interval: 1m0s
                  sourceRef:
                    kind: GitRepository
                    name: deploy-{{ $appName }}
                  path: "./"
                  prune: true
                  targetNamespace: {{ $xrName }}
            providerConfigRef:
              name: kubernetes-provider
  
  # Step 3: Mark as ready when all resources are created
  - step: auto-ready
    functionRef:
      name: function-auto-ready